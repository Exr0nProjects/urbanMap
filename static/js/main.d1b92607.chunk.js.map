{"version":3,"sources":["logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","INITIAL_VIEW_STATE","longitude","latitude","altitude","zoom","minZoom","maxZoom","pitch","bearing","LIVABILITY_COLUMNS_DATA","DOMAIN_NAME","App","useState","viewState","setViewState","geo_elevation_scale_from_zoom","Math","min","max","pow","geo_radius_from_zoom","floor","log","layers","HexagonLayer","visible","id","data","colorRange","opacity","coverage","lowerPercentile","pickable","extruded","radius","elevationRange","getPosition","d","snapped_lon","snapped_lat","getElevationWeight","walkscore","elevationAggregation","ColumnLayer","diskResolution","coordinateSystem","COORDINATE_SYSTEM","LNGLAT","elevationScale","getFillColor","getLineColor","di","getElevation","updateTriggers","lon","lat","value","coords","party","className","controller","onViewStateChange","e","mapLib","maplibregl","mapStyle","reuseMaps","preventStyleDiffering","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1b92607.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1ffea6bb.png\";","import React, { useState } from 'react';\nimport logo from './logo.png';\n\nimport { COORDINATE_SYSTEM } from '@deck.gl/core';\nimport DeckGL from '@deck.gl/react';\nimport { ColumnLayer, PointCloudLayer, GeoJsonLayer, ArcLayer, ScatterplotLayer } from '@deck.gl/layers';\nimport { HexagonLayer } from '@deck.gl/aggregation-layers';\nimport { Map } from 'react-map-gl';\nimport maplibregl from 'maplibre-gl';\n\nconst DOMAIN_NAME = 'http://localhost:3000'\n\n//const MAPSTYLE = 'https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json';\n//const MAPSTYLE = \"https://basemaps.cartocdn.com/gl/positron-gl-style/style.json\";\nconst MAPSTYLE = \"https://basemaps.cartocdn.com/gl/positron-nolabels-gl-style/style.json\";\n\n// Viewport settings\nconst INITIAL_VIEW_STATE = {\n    longitude: -103.90699029686266,\n    latitude: 31.884715226569835,\n    altitude: 1.5,\n    zoom: 3.2,\n    minZoom: 2.35,\n    maxZoom: 15,\n    pitch: 60,\n    bearing: -27.747183979974977,\n};\n\nconst POPULATION_COLUMNS_DATA = DOMAIN_NAME + '/data/cities.json';\nconst LIVABILITY_COLUMNS_DATA = DOMAIN_NAME + '/data/cities_livability.json';\nconst POLITICAL_COUNTIES_DATA = DOMAIN_NAME + '/data/politics_by_coords.json';\n\nfunction createLinearGradientRange(left, right, num) {  // create an array of num RGB arrays, including the endpoints\n    return Array(num).fill([left, right]).map(([a, b], i) =>\n        Array(Math.min(a.length, b.length)).fill(0)\n            .map((_, j) => i/(num-1) * b[j] + (1 - i/(num-1)) * a[j])\n    );\n}\n\nfunction App() {\n    const [viewState, setViewState] = useState(INITIAL_VIEW_STATE);\n\n    const geo_elevation_scale_from_zoom = (zoom) => Math.min(Math.max(Math.pow(2.8, (18 - zoom)), 1e4), 1e6);\n    const geo_radius_snapping_log_base = 1.4;\n    const geo_radius_from_zoom = (zoom) => Math.min(Math.max(Math.pow(geo_radius_snapping_log_base, Math.floor(Math.log(Math.pow(2.3, 18-zoom))/Math.log(geo_radius_snapping_log_base))), 500), 1e5);\n\n    //const DATA_URL = 'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/scatterplot/manhattan.json';\n    const layers = [\n        new HexagonLayer({\n            visible: false,\n            id: 'walkability-agg-hexagons-max',\n            data: LIVABILITY_COLUMNS_DATA,\n            //colorRange: createLinearGradientRange([150, 0, 0], [50, 255, 50], 6),\n            colorRange: [[221, 152, 112], [172, 133, 111], [121, 114, 109], [92, 164, 106], [67, 207, 103], [39, 255, 100]],\n            //colorRange: [[0, 0, 255], [0, 0, 245]],\n            opacity: 0.1,\n            coverage: 0.3,\n            lowerPercentile: 2,\n            pickable: true,\n            extruded: true,\n            radius: geo_radius_from_zoom(viewState.zoom),\n            elevationRange: [0, geo_elevation_scale_from_zoom(viewState.zoom)],\n            getPosition: d => [d.snapped_lon, d.snapped_lat],\n            getElevationWeight: d => d.walkscore / 100,\n            elevationAggregation: 'MAX',\n        }),\n        new HexagonLayer({\n            visible: true,\n            id: 'walkability-agg-hexagons-avg',\n            data: LIVABILITY_COLUMNS_DATA,\n            //colorRange: createLinearGradientRange([150, 0, 0], [50, 255, 50], 6),\n            colorRange: [[221, 152, 12], [172, 133, 11], [121, 114, 9], [92, 164, 6], [67, 207, 3], [39, 255, 0]],\n            opacity: 0.7,\n            lowerPercentile: 2,\n            pickable: true,\n            extruded: true,\n            radius: geo_radius_from_zoom(viewState.zoom) * 0.8,\n            coverage: 0.7,\n            elevationRange: [0, geo_elevation_scale_from_zoom(viewState.zoom)],\n            getPosition: d => [d.snapped_lon, d.snapped_lat],\n            getElevationWeight: d => d.walkscore / 100,\n            elevationAggregation: 'AVG',\n        }),\n        new ColumnLayer({\n            visible: true,\n            id: 'walkability-columns',\n            data: LIVABILITY_COLUMNS_DATA,\n            diskResolution: 40,\n            coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n            radius: 800,\n            opacity: 0.8,\n            extruded: true,\n            pickable: true,\n            elevationScale: 1,\n            getPosition: d => [d.snapped_lon, d.snapped_lat],\n            getFillColor: d => [(1 - d.walkscore / 100) * 255, d.walkscore/100 * 255, 52, 255],\n            getLineColor: (d, di) => [0, 0, 0],\n            getElevation: d => d.walkscore / 100 * geo_elevation_scale_from_zoom(viewState.zoom) * 1.2,\n            updateTriggers: {\n                getElevation: viewState.zoom,\n            }\n        }),\n    // POPULATION\n        new HexagonLayer({\n            visible: false,\n            id: 'population-agg-hexagons',\n            data: POPULATION_COLUMNS_DATA,\n            opacity: 0.2,\n            lowerPercentile: 2,\n            pickable: true,\n            extruded: true,\n            radius: geo_radius_from_zoom(viewState.zoom),\n            elevationRange: [0, geo_elevation_scale_from_zoom(viewState.zoom) * 0.6],\n            getPosition: d => [d.lon, d.lat],\n            getElevationWeight: d => d.value,\n            elevationAggregation: 'SUM',\n        }),\n        //new ColumnLayer({\n        //    visible: false,\n        //    id: 'population-columns',\n        //    data: POPULATION_COLUMNS_DATA,\n        //    diskResolution: 40,\n        //    coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n        //    radius: 1000,\n        //    opacity: 0.5,\n        //    extruded: true,\n        //    pickable: true,\n        //    elevationScale: 1,\n        //    getPosition: d => [d.lon, d.lat],\n        //    getFillColor: d => [48, 128, d.value * 255, 255],\n        //    getLineColor: (d, di) => [0, 0, 0],\n        //    getElevation: d => d.value * geo_elevation_scale_from_zoom(viewState.zoom),\n        //    updateTriggers: {\n        //        getElevation: viewState.zoom,\n        //    }\n        //}),\n    // POLITICS\n        //new HexagonLayer({\n        //    visible: true,\n        //    id: 'political-agg-hexagons',\n        //    data: POLITICAL_COUNTIES_DATA,\n        //    colorRange: [[200, 0, 0], [100, 0, 100], [0, 0, 200]],\n        //    opacity: 0.8,\n        //    pickable: true,\n        //    extruded: false,\n        //    radius: geo_radius_from_zoom(viewState.zoom),\n        //    //elevationRange: [0, geo_elevation_scale_from_zoom(viewState.zoom) * 0.6],\n        //    getPosition: d => [d.coords[1], d.coords[0]],\n        //    getElevationWeight: d => d.party === 'DEMOCRAT' ? 1 : 0,\n        //    elevationAggregation: 'AVG',\n        //}),\n        new ColumnLayer({\n            visible: true,\n            id: 'political-columns',\n            data: POLITICAL_COUNTIES_DATA,\n            diskResolution: 40,\n            coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n            radius: 3e4,\n            opacity: 0.6,\n            extruded: false,\n            pickable: true,\n            elevationScale: 1,\n            getPosition: d => [d.coords[1], d.coords[0]],\n            getFillColor: d => d.party == 'DEMOCRAT' ? [0, 21, 188] : [222, 1, 0],\n            getLineColor: (d, di) => [0, 0, 0],\n            getElevation: d => d.value * geo_elevation_scale_from_zoom(viewState.zoom),\n            updateTriggers: {\n                getElevation: viewState.zoom,\n            }\n        }),\n        //new ScatterplotLayer({\n        //    id: 'scatter-plot',\n        //    DATA_URL,\n        //    radiusScale: 30,\n        //    radiusMinPixels: 0.25,\n        //    getPosition: d => { console.log('getting coord!'); return [d[0], d[1], 0] },\n        //    getFillColor: d => (d[2] === 1 ? [0, 0, 255] : [255, 0, 0]),\n        //    getRadius: 1,\n        //})\n        //new ScatterplotLayer({\n        //    visible: true,\n        //    id: 'political-scatter-plot',\n        //    POLITICAL_COUNTIES_DATA,\n        //    radiusScale: 10000,\n        //    radiusMinPixels: 20,\n        //    radiusMaxPixels: 100,\n        //    //coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n        //    //radiusMinPixels: 0.25,\n        //    //getPosition: d => [d.coords[1], d.coords[0], 1],\n        //    getPosition: d => {\n        //        console.log(d.coords[1], d.coords[0])\n        //        return [d.coords[1], d.coords[0]];\n        //    },\n        //    //getFillColor: d => ({ DEMOCRAT: [0, 21, 188], REPUBLICAN: [222, 1, 0], LIBERTARIAN: [254, 209, 5], OTHER: [30, 30, 30] })[d.party],\n        //    getFillColor: [0x32, 0x6c, 0xcc],\n        //    getRadius: 1,\n        //})\n    ];\n\n    return (\n        <div className=\"bg-gray-700 text-white w-screen h-screen overflow-hidden scroll-none\">\n        <div className=\"z-40 position-fixed h-20 w-40 border-2 border-blue-700 mb-0 ml-0\">hewwo</div>\n        <DeckGL\n            controller={true}\n            viewState={viewState}\n            onViewStateChange={ e => {\n                //console.log(e.viewState);\n                setViewState(e.viewState);\n            } }\n            layers={layers} >\n            <Map\n                className=\"w-full h-full\"\n                mapLib={maplibregl}\n                mapStyle={MAPSTYLE}\n                reuseMaps\n                preventStyleDiffering={true}\n            />\n        </DeckGL>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["logo.png","components/UrbanMap.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","DOMAIN_NAME","INITIAL_VIEW_STATE","longitude","latitude","altitude","zoom","minZoom","maxZoom","pitch","bearing","LIVABILITY_COLUMNS_DATA","geo_elevation_scale_from_zoom","Math","min","max","pow","geo_radius_from_zoom","floor","log","layerNames","mapStyle","useState","viewState","setViewState","knownLayers","HexagonLayer","id","data","colorRange","opacity","coverage","lowerPercentile","pickable","extruded","radius","elevationRange","getPosition","d","snapped_lon","snapped_lat","getElevationWeight","walkscore","elevationAggregation","visible","ColumnLayer","diskResolution","coordinateSystem","COORDINATE_SYSTEM","LNGLAT","elevationScale","getFillColor","getLineColor","di","getElevation","updateTriggers","lon","lat","value","coords","party","layers","map","name","controller","onViewStateChange","e","className","mapLib","maplibregl","reuseMaps","preventStyleDiffering","App","checkboxesText","defaultStates","Object","fromEntries","entries","checkboxesState","setCheckboxesState","handleCheck","target","checked","keys","filter","k","console","style","height","zIndex","UrbanMap","padding","borderRadius","width","backgroundColor","fontFamily","userSelect","FormGroup","pointerEvents","i","v","FormControlLabel","control","Checkbox","onChange","label","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qOAAAA,EAAOC,QAAU,IAA0B,kC,yKCSrCC,EAAc,6BAKdC,EAAqB,CACvBC,WAAY,mBACZC,SAAU,mBACVC,SAAU,IACVC,KAAM,IACNC,QAAS,KACTC,QAAS,GACTC,MAAO,GACPC,SAAU,oBAIRC,EAA0BV,EAAc,+BAGxCW,EAAgC,SAACN,GAAD,OAAUO,KAAKC,IAAID,KAAKE,IAAIF,KAAKG,IAAI,IAAM,GAAKV,GAAQ,KAAM,MAE9FW,EAAuB,SAACX,GAAD,OAAUO,KAAKC,IAAID,KAAKE,IAAIF,KAAKG,IADzB,IAC2DH,KAAKK,MAAML,KAAKM,IAAIN,KAAKG,IAAI,IAAK,GAAGV,IAAOO,KAAKM,IAD5G,OACiJ,KAAM,MAE7K,cAAoC,IAAzBC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,SAElC,EAAkCC,mBAASpB,GAA3C,mBAAOqB,EAAP,KAAkBC,EAAlB,KAGMC,EAAc,CAChB,+BAAgC,IAAIC,IAAa,CAC7CC,GAAI,+BACJC,KAAMjB,EAENkB,WAAY,CAAC,CAAC,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,KAAM,CAAC,GAAI,IAAK,KAAM,CAAC,GAAI,IAAK,KAAM,CAAC,GAAI,IAAK,MAE1GC,QAAS,GACTC,SAAU,GACVC,gBAAiB,EACjBC,UAAU,EACVC,UAAU,EACVC,OAAQlB,EAAqBM,EAAUjB,MACvC8B,eAAgB,CAAC,EAAGxB,EAA8BW,EAAUjB,OAC5D+B,YAAa,SAAAC,GAAC,MAAI,CAACA,EAAEC,YAAaD,EAAEE,cACpCC,mBAAoB,SAAAH,GAAC,OAAIA,EAAEI,UAAY,KACvCC,qBAAsB,QAE1B,+BAAgC,IAAIjB,IAAa,CAC7CkB,SAAS,EACTjB,GAAI,+BACJC,KAAMjB,EAENkB,WAAY,CAAC,CAAC,IAAK,IAAK,IAAK,CAAC,IAAK,IAAK,IAAK,CAAC,IAAK,IAAK,GAAI,CAAC,GAAI,IAAK,GAAI,CAAC,GAAI,IAAK,GAAI,CAAC,GAAI,IAAK,IAClGC,QAAS,GACTE,gBAAiB,EACjBC,UAAU,EACVC,UAAU,EACVC,OAA+C,GAAvClB,EAAqBM,EAAUjB,MACvCyB,SAAU,GACVK,eAAgB,CAAC,EAAGxB,EAA8BW,EAAUjB,OAC5D+B,YAAa,SAAAC,GAAC,MAAI,CAACA,EAAEC,YAAaD,EAAEE,cACpCC,mBAAoB,SAAAH,GAAC,OAAIA,EAAEI,UAAY,KACvCC,qBAAsB,QAE1B,sBAAuB,IAAIE,IAAY,CACnClB,GAAI,sBACJC,KAAMjB,EACNmC,eAAgB,GAChBC,iBAAkBC,IAAkBC,OACpCd,OAAQ,IACRL,QAAS,GACTI,UAAU,EACVD,UAAU,EACViB,eAAgB,EAChBb,YAAa,SAAAC,GAAC,MAAI,CAACA,EAAEC,YAAaD,EAAEE,cACpCW,aAAc,SAAAb,GAAC,MAAI,CAA2B,KAAzB,EAAIA,EAAEI,UAAY,KAAYJ,EAAEI,UAAU,IAAM,IAAK,GAAI,MAC9EU,aAAc,SAACd,EAAGe,GAAJ,MAAW,CAAC,EAAG,EAAG,IAChCC,aAAc,SAAAhB,GAAC,OAAIA,EAAEI,UAAY,IAAM9B,EAA8BW,EAAUjB,MAAQ,KACvFiD,eAAgB,CACZD,aAAc/B,EAAUjB,QAGhC,0BAA2B,IAAIoB,IAAa,CACxCC,GAAI,0BACJC,KApEoB3B,8CAqEpB6B,QAAS,GACTE,gBAAiB,EACjBC,UAAU,EACVC,UAAU,EACVC,OAAQlB,EAAqBM,EAAUjB,MACvC8B,eAAgB,CAAC,EAAmD,GAAhDxB,EAA8BW,EAAUjB,OAC5D+B,YAAa,SAAAC,GAAC,MAAI,CAACA,EAAEkB,IAAKlB,EAAEmB,MAC5BhB,mBAAoB,SAAAH,GAAC,OAAIA,EAAEoB,OAC3Bf,qBAAsB,QAE1B,qBAAsB,IAAIE,IAAY,CAClClB,GAAI,qBACJC,KAjFoB3B,8CAkFpB6C,eAAgB,GAChBC,iBAAkBC,IAAkBC,OACpCd,OAAQ,IACRL,QAAS,GACTI,UAAU,EACVD,UAAU,EACViB,eAAgB,EAChBb,YAAa,SAAAC,GAAC,MAAI,CAACA,EAAEkB,IAAKlB,EAAEmB,MAC5BN,aAAc,SAAAb,GAAC,MAAI,CAAC,GAAI,IAAe,IAAVA,EAAEoB,MAAa,MAC5CN,aAAc,SAACd,EAAGe,GAAJ,MAAW,CAAC,EAAG,EAAG,IAChCC,aAAc,SAAAhB,GAAC,OAAIA,EAAEoB,MAAQ9C,EAA8BW,EAAUjB,OACrEiD,eAAgB,CACZD,aAAc/B,EAAUjB,QAGhC,oBAAqB,IAAIuC,IAAY,CACjCD,SAAS,EACTjB,GAAI,oBACJC,KAlGoB3B,0DAmGpB6C,eAAgB,GAChBC,iBAAkBC,IAAkBC,OACpCd,OAAQ,IACRL,QAAS,GACTI,UAAU,EACVD,UAAU,EACViB,eAAgB,EAChBb,YAAa,SAAAC,GAAC,MAAI,CAACA,EAAEqB,OAAO,GAAIrB,EAAEqB,OAAO,KACzCR,aAAc,SAAAb,GAAC,MAAe,YAAXA,EAAEsB,MAAsB,CAAC,EAAG,GAAI,KAAO,CAAC,IAAK,EAAG,IACnER,aAAc,SAACd,EAAGe,GAAJ,MAAW,CAAC,EAAG,EAAG,IAChCC,aAAc,SAAAhB,GAAC,OAAIA,EAAEoB,MAAQ9C,EAA8BW,EAAUjB,OACrEiD,eAAgB,CACZD,aAAc/B,EAAUjB,SAK9BuD,EAASzC,EAAW0C,KAAI,SAAAC,GAAI,OAAItC,EAAYsC,MAElD,OAAO,kBAAC,IAAD,CACHC,YAAY,EACZzC,UAAWA,EACX0C,kBAAoB,SAAAC,GAEhB1C,EAAa0C,EAAE3C,YAEnBsC,OAAQA,GACR,kBAAC,IAAD,CACIM,UAAU,gBACVC,OAAQC,IACRhD,SAAUA,EACViD,WAAS,EACTC,uBAAuB,M,oCC3FpBC,MAnDf,WAGI,IAAMC,EAAiB,CACnB,+BAAgC,CAAC,6BAA6B,GAC9D,+BAAgC,CAAC,6BAA6B,GAC9D,sBAAuB,CAAC,0BAA0B,GAClD,0BAA2B,CAAC,wBAAwB,GACpD,qBAAsB,CAAC,sBAAsB,GAC7C,oBAAqB,CAAC,0BAA0B,IAK9CC,EAAgBC,OAAOC,YAAYD,OAAOE,QAAQJ,GAAgBX,KAAI,yCAAY,CAAZ,UAAkB,QAC9F,EAAgDxC,mBAASoD,GAAzD,mBAAQI,EAAR,KAAyBC,EAAzB,KACMC,EAAc,SAAAd,GAChBa,EAAmB,2BACZD,GADW,kBAEbZ,EAAEe,OAAOlB,KAAOG,EAAEe,OAAOC,YAI5B9D,EAAauD,OAAOQ,KAAKL,GAAiBM,QAAO,SAAAC,GAAC,OAAIP,EAAgBO,MAG5E,OAFAC,QAAQnE,IAAIC,GAGR,yBAAK+C,UAAU,uCAAuCoB,MAAO,CAACC,OAAQ,QAASC,QAAS,IACpF,yBAAKtB,UAAU,4BACX,kBAACuB,EAAD,CAAUtE,WAAYA,EAAYC,SAjCjC,mEAqCL,yBAAK8C,UAAU,6DAA6DoB,MAAO,CAACI,QAAS,SACzF,yBAAKxB,UAAU,oCAAoCoB,MAAO,CAACI,QAAS,OAAQC,aAAc,OAAQC,MAAO,QAASC,gBAAiB,wBAAyBC,WAAY,YAAaC,WAAY,SACzM,2EAAgD,8BAEhD,kBAACC,EAAA,EAAD,CAAWV,MAAO,CAACW,cAAe,WAChCvB,OAAOE,QAAQC,GAAiBhB,KAAI,WAASqC,GAAT,uBAAEd,EAAF,KAAKe,EAAL,YAClC,kBAACC,EAAA,EAAD,CACIC,QAAS,kBAACC,EAAA,EAAD,CAAUrB,QAASkB,EAAGI,SAAUxB,EAAajB,KAAMsB,IAC5DoB,MAAOhC,EAAeY,GAAG,GAAIqB,IAAKP,YC7C9BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.82a1677f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1ffea6bb.png\";","import React, { useState } from 'react';\n\nimport { COORDINATE_SYSTEM } from '@deck.gl/core';\nimport DeckGL from '@deck.gl/react';\nimport { ColumnLayer, PointCloudLayer, GeoJsonLayer, ArcLayer, ScatterplotLayer } from '@deck.gl/layers';\nimport { HexagonLayer } from '@deck.gl/aggregation-layers';\nimport { Map } from 'react-map-gl';\nimport maplibregl from 'maplibre-gl';\n\nconst DOMAIN_NAME = 'https://urbanmap.exr0n.com';\n//const DOMAIN_NAME = 'http://localhost:3000';\n//const DOMAIN_NAME = '';\n\n// Viewport settings\nconst INITIAL_VIEW_STATE = {\n    longitude: -103.90699029686266,\n    latitude: 31.884715226569835,\n    altitude: 1.5,\n    zoom: 3.2,\n    minZoom: 2.35,\n    maxZoom: 15,\n    pitch: 60,\n    bearing: -27.747183979974977,\n};\n\nconst POPULATION_COLUMNS_DATA = DOMAIN_NAME + '/data/cities.json';\nconst LIVABILITY_COLUMNS_DATA = DOMAIN_NAME + '/data/cities_livability.json';\nconst POLITICAL_COUNTIES_DATA = DOMAIN_NAME + '/data/politics_by_coords.json';\n\nconst geo_elevation_scale_from_zoom = (zoom) => Math.min(Math.max(Math.pow(2.8, (18 - zoom)), 1e4), 1e6);\nconst geo_radius_snapping_log_base = 1.4;\nconst geo_radius_from_zoom = (zoom) => Math.min(Math.max(Math.pow(geo_radius_snapping_log_base, Math.floor(Math.log(Math.pow(2.3, 18-zoom))/Math.log(geo_radius_snapping_log_base))), 500), 1e5);\n\nexport default function({ layerNames, mapStyle }) {\n\n    const [viewState, setViewState] = useState(INITIAL_VIEW_STATE);\n\n\n    const knownLayers = {\n        'walkability-agg-hexagons-max': new HexagonLayer({\n            id: 'walkability-agg-hexagons-max',\n            data: LIVABILITY_COLUMNS_DATA,\n            //colorRange: createLinearGradientRange([150, 0, 0], [50, 255, 50], 6),\n            colorRange: [[221, 152, 112], [172, 133, 111], [121, 114, 109], [92, 164, 106], [67, 207, 103], [39, 255, 100]],\n            //colorRange: [[0, 0, 255], [0, 0, 245]],\n            opacity: 0.1,\n            coverage: 0.3,\n            lowerPercentile: 2,\n            pickable: true,\n            extruded: true,\n            radius: geo_radius_from_zoom(viewState.zoom),\n            elevationRange: [0, geo_elevation_scale_from_zoom(viewState.zoom)],\n            getPosition: d => [d.snapped_lon, d.snapped_lat],\n            getElevationWeight: d => d.walkscore / 100,\n            elevationAggregation: 'MAX',\n        }),\n        'walkability-agg-hexagons-avg': new HexagonLayer({\n            visible: true,\n            id: 'walkability-agg-hexagons-avg',\n            data: LIVABILITY_COLUMNS_DATA,\n            //colorRange: createLinearGradientRange([150, 0, 0], [50, 255, 50], 6),\n            colorRange: [[221, 152, 12], [172, 133, 11], [121, 114, 9], [92, 164, 6], [67, 207, 3], [39, 255, 0]],\n            opacity: 0.7,\n            lowerPercentile: 2,\n            pickable: true,\n            extruded: true,\n            radius: geo_radius_from_zoom(viewState.zoom) * 0.8,\n            coverage: 0.7,\n            elevationRange: [0, geo_elevation_scale_from_zoom(viewState.zoom)],\n            getPosition: d => [d.snapped_lon, d.snapped_lat],\n            getElevationWeight: d => d.walkscore / 100,\n            elevationAggregation: 'AVG',\n        }),\n        'walkability-columns': new ColumnLayer({\n            id: 'walkability-columns',\n            data: LIVABILITY_COLUMNS_DATA,\n            diskResolution: 40,\n            coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n            radius: 800,\n            opacity: 0.8,\n            extruded: true,\n            pickable: true,\n            elevationScale: 1,\n            getPosition: d => [d.snapped_lon, d.snapped_lat],\n            getFillColor: d => [(1 - d.walkscore / 100) * 255, d.walkscore/100 * 255, 52, 255],\n            getLineColor: (d, di) => [0, 0, 0],\n            getElevation: d => d.walkscore / 100 * geo_elevation_scale_from_zoom(viewState.zoom) * 1.2,\n            updateTriggers: {\n                getElevation: viewState.zoom,\n            }\n        }),\n        'population-agg-hexagons': new HexagonLayer({\n            id: 'population-agg-hexagons',\n            data: POPULATION_COLUMNS_DATA,\n            opacity: 0.2,\n            lowerPercentile: 2,\n            pickable: true,\n            extruded: true,\n            radius: geo_radius_from_zoom(viewState.zoom),\n            elevationRange: [0, geo_elevation_scale_from_zoom(viewState.zoom) * 0.6],\n            getPosition: d => [d.lon, d.lat],\n            getElevationWeight: d => d.value,\n            elevationAggregation: 'SUM',\n        }),\n        'population-columns': new ColumnLayer({\n            id: 'population-columns',\n            data: POPULATION_COLUMNS_DATA,\n            diskResolution: 40,\n            coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n            radius: 1000,\n            opacity: 0.5,\n            extruded: true,\n            pickable: true,\n            elevationScale: 1,\n            getPosition: d => [d.lon, d.lat],\n            getFillColor: d => [48, 128, d.value * 255, 255],\n            getLineColor: (d, di) => [0, 0, 0],\n            getElevation: d => d.value * geo_elevation_scale_from_zoom(viewState.zoom),\n            updateTriggers: {\n                getElevation: viewState.zoom,\n            }\n        }),\n        'political-columns': new ColumnLayer({\n            visible: true,\n            id: 'political-columns',\n            data: POLITICAL_COUNTIES_DATA,\n            diskResolution: 40,\n            coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n            radius: 3e4,\n            opacity: 0.6,\n            extruded: false,\n            pickable: true,\n            elevationScale: 1,\n            getPosition: d => [d.coords[1], d.coords[0]],\n            getFillColor: d => d.party == 'DEMOCRAT' ? [0, 21, 188] : [222, 1, 0],\n            getLineColor: (d, di) => [0, 0, 0],\n            getElevation: d => d.value * geo_elevation_scale_from_zoom(viewState.zoom),\n            updateTriggers: {\n                getElevation: viewState.zoom,\n            }\n        }),\n    };\n\n    const layers = layerNames.map(name => knownLayers[name]);\n\n    return <DeckGL\n        controller={true}\n        viewState={viewState}\n        onViewStateChange={ e => {\n            //console.log(e.viewState);\n            setViewState(e.viewState);\n        } }\n        layers={layers} >\n        <Map\n            className=\"w-full h-full\"\n            mapLib={maplibregl}\n            mapStyle={mapStyle}\n            reuseMaps\n            preventStyleDiffering={true}\n        />\n    </DeckGL>;\n}\n","import React, { useState } from 'react';\nimport UrbanMap from './components/UrbanMap.jsx';\nimport logo from './logo.png';\n\nimport FormLabel from '@mui/material/FormLabel';\nimport FormControl from '@mui/material/FormControl';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Checkbox from '@mui/material/Checkbox';\n\n//const MAPSTYLE = 'https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json';\nconst MAPSTYLE = \"https://basemaps.cartocdn.com/gl/positron-gl-style/style.json\";\n//const MAPSTYLE = \"https://basemaps.cartocdn.com/gl/positron-nolabels-gl-style/style.json\";\n\n\nfunction App() {\n    //const [ layerNames, setLayerNames ] = useState(['walkability-agg-hexagons-avg', 'walkability-columns', 'political-columns']);\n\n    const checkboxesText = {\n        \"walkability-agg-hexagons-max\": [\"Max aggregate walkability\", false],\n        \"walkability-agg-hexagons-avg\": [\"Avg aggregate walkability\", true],\n        \"walkability-columns\": [\"Walkability datapoints\", true],\n        \"population-agg-hexagons\": [\"Aggregate population\", false],\n        \"population-columns\": [\"Population centers\", false],\n        \"political-columns\": [\"Political scatter plot\", true],\n    };\n\n\n    // we handle the checkbox state ourselves, so that we can pass it down to components\n    const defaultStates = Object.fromEntries(Object.entries(checkboxesText).map(([k, v]) => [k, v[1]]));  // get the second thing in the tuple for each one, then convert back to a dicitonary\n    const [ checkboxesState, setCheckboxesState ] = useState(defaultStates);\n    const handleCheck = e => {\n        setCheckboxesState({\n            ...checkboxesState,\n            [e.target.name]: e.target.checked\n        });\n    }\n\n    const layerNames = Object.keys(checkboxesState).filter(k => checkboxesState[k]);\n    console.log(layerNames)\n\n    return (\n        <div className=\"w-screen overflow-hidden bg-gray-700\" style={{height: '100vh', zIndex: -1}}>\n            <div className=\"relative w-screen h-full\">\n                <UrbanMap layerNames={layerNames} mapStyle={MAPSTYLE} />\n            </div>\n\n\n            <div className=\"fixed bottom-0 left-0 z-10 flex flex-col-reverse mb-0 ml-0\" style={{padding: '1rem' }}>\n                <div className=\"relative flex flex-col text-white\" style={{padding: '1rem', borderRadius: '1rem', width: '21rem', backgroundColor: 'rgba(30, 30, 30, 0.2)', fontFamily: 'Helvetica', userSelect: 'none'}}>\n        <p>Drag to pan, scroll to zoom, shift to rotate.<br/></p>\n\n        <FormGroup style={{pointerEvents: 'revert'}}>\n        { Object.entries(checkboxesState).map(([k, v], i) =>\n            <FormControlLabel\n                control={<Checkbox checked={v} onChange={handleCheck} name={k} />}\n                label={checkboxesText[k][0]} key={i} /> ) }\n        </FormGroup>\n\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}